function autocomplete(e,t,i){var a;function l(e){return"<mark>"+e+"</mark>"}function n(e){if(!e)return!1;(function e(t){for(var i=0;i<t.length;i++)t[i].classList.remove("autocomplete-active")})(e),a>=e.length&&(a=0),a<0&&(a=e.length-1),e[a].classList.add("autocomplete-active")}function s(t){for(var i=document.getElementsByClassName("autocomplete-items"),a=0;a<i.length;a++)t!=i[a]&&t!=e&&i[a].parentNode.removeChild(i[a])}e.addEventListener("input",function(e){var n,r,o=this.value;if(s(),!o)return!1;o=o.toLowerCase().trim();let c=o.split(" ");a=-1,(n=document.createElement("DIV")).setAttribute("id",this.id+"autocomplete-list"),n.setAttribute("class","autocomplete-items"),this.parentNode.appendChild(n);let m=new Map;for(let u of Object.keys(t))for(o of c)if(u.includes(o))for(let d of t[u])if(m.has(d)){let f=m.get(d);f.matchs.includes(o)||f.matchs.push(o)}else m.set(d,{title:i[d].title,url:i[d].url,image:i[d].image,matchs:[o]});for(let h of m.values())if(h.matchs.length===c.length){r=document.createElement("DIV");let p=h.title;for(match of h.matchs){p=p.replace(match,l(match));let g=match.charAt(0).toUpperCase()+match.slice(1);p=p.replace(g,l(g))}let v=h.image?`<img class="search-image" src="/images/${h.image}">`:"";h.image&&r.setAttribute("class","autocomplete-items-image"),r.innerHTML+=`<a href="/${h.url}">${v}${p}</a>`,r.innerHTML+=`<input type='hidden' value='/${h.url}'>`,r.addEventListener("click",function(e){window.location.href=this.getElementsByTagName("input")[0].value,s()}),n.appendChild(r)}}),e.addEventListener("keydown",function(e){var t=document.getElementById(this.id+"autocomplete-list");t&&(t=t.getElementsByTagName("div")),40==e.keyCode?(a++,n(t)):38==e.keyCode?(a--,n(t)):13==e.keyCode&&(e.preventDefault(),a>-1&&t&&t[a].click())}),document.addEventListener("click",function(e){s(e.target)})}