function autocomplete(e,t,i){var l;function n(e){return"<mark>"+e+"</mark>"}function a(e){if(!e)return!1;(function e(t){for(var i=0;i<t.length;i++)t[i].classList.remove("autocomplete-active")})(e),l>=e.length&&(l=0),l<0&&(l=e.length-1),e[l].classList.add("autocomplete-active")}function o(t){for(var i=document.getElementsByClassName("autocomplete-items"),l=0;l<i.length;l++)t!=i[l]&&t!=e&&i[l].parentNode.removeChild(i[l])}e.addEventListener("input",function(e){var a,r,s=this.value;if(o(),!s)return!1;s=s.toLowerCase().trim();let c=s.split(" ");l=-1,(a=document.createElement("DIV")).setAttribute("id",this.id+"autocomplete-list"),a.setAttribute("class","autocomplete-items"),this.parentNode.appendChild(a);let u=new Map;for(let d of Object.keys(t))for(s of c)if(d.includes(s))for(let f of t[d])if(u.has(f)){let m=u.get(f);m.matchs.includes(s)||m.matchs.push(s)}else u.set(f,{title:i[f].title,url:i[f].url,matchs:[s]});for(let p of u.values()){r=document.createElement("DIV");let h=p.title;for(match of p.matchs){h=h.replace(match,n(match));let v=match.charAt(0).toUpperCase()+match.slice(1);h=h.replace(v,n(v))}r.innerHTML+='<a href="/'+p.url+'">'+h+"</a>",r.innerHTML+="<input type='hidden' value='/"+p.url+"'>",r.addEventListener("click",function(e){window.location.href=this.getElementsByTagName("input")[0].value,o()}),a.appendChild(r)}}),e.addEventListener("keydown",function(e){var t=document.getElementById(this.id+"autocomplete-list");t&&(t=t.getElementsByTagName("div")),40==e.keyCode?(l++,a(t)):38==e.keyCode?(l--,a(t)):13==e.keyCode&&(e.preventDefault(),l>-1&&t&&t[l].click())}),document.addEventListener("click",function(e){o(e.target)})}